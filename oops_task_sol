#Create your own class to perform a list search operation

import logging as lg

lg.basicConfig(filename="logger.log", level=lg.DEBUG, filemode='w', format="%(asctime)s %(levelname)s %(message)s")
            
class ListSearch:
               def __init__(self, data):
                   self.data=data
               
               def search(self, value):
                   try:
                       lg.info("Searching...")
                       for i in range(len(self.data)):
                           if(self.data[i]==value):
                               lg.info("Successful Search")
                               return i, True
                       lg.info("Unsuccessful")
                       return False
                   except Exception as e:
                       lg.error("Error")
                       lg.exception(e)


#Create a class for dict new element addition

import logging as lg

lg.basicConfig(filename = "logger.log", level=lg.DEBUG, filemode='w', format="%(asctime)s %(levelname)s %(message)s")

class dict_add:
    def __init__(self, diction):
        self.diction=diction
    
    def element_add(self , element):
        lg.info("into the element")
        if type(element)==dict:
            try:
                lg.info("inside try")
                self.diction.update(element)
                lg.info("new element added")
            except Exception as e:
                lg.error("there is an error")
                lg.exception(e)
                
        else:
            lg.error(f"please check if {element} is valid dict or not")
        



#Create a class for tuple data extraction

class tplext:
            def __init__(self,tdata):
               self.tdata=tdata
            def extract(self):
                start=int(input('Enter start index number'))
                end=int(input('Enter end index number'))
                return self.tdata[start:end]
